/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.zookeeper.client;

import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Most simple HostProvider, resolves at instantiation, and re-resolves an address
 * if it is skipped over by an additional call to next.
 *
 */
public final class StaticHostProvider implements HostProvider {
    private static final Logger LOG = LoggerFactory
            .getLogger(StaticHostProvider.class);

    private final List<InetSocketAddress> serverAddresses = new ArrayList<InetSocketAddress>(
            5);

    private int lastIndex = -1;

    private int currentIndex = -1;

    // Don't re-resolve on first next() call
    private boolean connectedSinceNext = true;

    /**
     * Constructs a SimpleHostSet.
     *
     * @param serverAddresses
     *            possibly unresolved ZooKeeper server addresses
     * @throws UnknownHostException
     * @throws IllegalArgumentException
     *             if serverAddresses is empty or resolves to an empty list
     */
    public StaticHostProvider(Collection<InetSocketAddress> serverAddresses)
            throws UnknownHostException {
        for (InetSocketAddress address : serverAddresses) {
            this.serverAddresses.addAll(resolveAddress(address));
        }

        if (this.serverAddresses.isEmpty()) {
            throw new IllegalArgumentException(
                    "A HostProvider may not be empty!");
        }
        Collections.shuffle(this.serverAddresses);
    }

    public int size() {
        return serverAddresses.size();
    }

    public InetSocketAddress next(long spinDelay) {
        if (!connectedSinceNext) {
            // The current address was generated by the previous call to
            // next(). That call, did not result in a successful connection.
            //
            // Therefore, attempt re-resolution on the current address
            // before moving on to the next index.
            InetSocketAddress curAddress = serverAddresses.get(currentIndex);
            LOG.info("Re-resolving {}", curAddress.getHostString());

            // Re-resolve the address
            try {
                List<InetSocketAddress> reresolvedAddresses = resolveAddress(curAddress);

                if (reresolvedAddresses.size() == 1) {
                    serverAddresses.set(currentIndex, reresolvedAddresses.get(0));
                } else {
                    serverAddresses.remove(currentIndex);
                    for (InetSocketAddress resolvedAddress : reresolvedAddresses) {
                        if (!serverAddresses.contains(resolvedAddress)) {
                            serverAddresses.add(resolvedAddress);
                        }
                    }
                }

                LOG.info("Added newly resolved addresses: {}", reresolvedAddresses.toString());
            } catch (UnknownHostException e) {
                LOG.warn("Cannot re-resolve server: {}", curAddress, e);
            }
        }

        connectedSinceNext = false;
        currentIndex = ++currentIndex % serverAddresses.size();
        if (currentIndex == lastIndex && spinDelay > 0) {
            try {
                Thread.sleep(spinDelay);
            } catch (InterruptedException e) {
                LOG.warn("Unexpected exception", e);
            }
        } else if (lastIndex == -1) {
            // We don't want to sleep on the first ever connect attempt.
            lastIndex = 0;
        }

        return serverAddresses.get(currentIndex);
    }

    public void onConnected() {
        lastIndex = currentIndex;
        connectedSinceNext = true;
    }

    private List<InetSocketAddress> resolveAddress(InetSocketAddress address) throws UnknownHostException {
        InetAddress resolvedAddresses[] = InetAddress.getAllByName((address.getHostString()));

        List<InetSocketAddress> addresses = new ArrayList<InetSocketAddress>();
        for (InetAddress resolvedAddress : resolvedAddresses) {
            addresses.add(new InetSocketAddress(
                InetAddress.getByAddress(
                    address.getHostString(),
                    resolvedAddress.getAddress()),
                address.getPort()));
        }

        return addresses;
    }
}
